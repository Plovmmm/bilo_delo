import psycopg2
from psycopg2 import pool
import os
from dotenv import load_dotenv

load_dotenv()

class TableDropper:
    def __init__(self):
        self.connection_pool = None
        
    def init_pool(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è connection pool"""
        try:
            self.connection_pool = pool.ThreadedConnectionPool(
                minconn=1,
                maxconn=5,
                host=os.getenv('DB_HOST', 'localhost'),
                database=os.getenv('DB_NAME', 'bilodelo'),
                user=os.getenv('DB_USER', 'postgres'),
                password=os.getenv('DB_PASSWORD', ''),
                port=os.getenv('DB_PORT', '5432')
            )
            print("‚úÖ Connection pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ pool: {e}")
            return False
    
    def _execute_query(self, query):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        conn = self.connection_pool.getconn()
        try:
            with conn.cursor() as cursor:
                cursor.execute(query)
                conn.commit()
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            conn.rollback()
            return False
        finally:
            self.connection_pool.putconn(conn)
    
    def drop_photos_table(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã photos"""
        try:
            query = "DROP TABLE IF EXISTS photos CASCADE;"
            success = self._execute_query(query)
            if success:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ photos —É–¥–∞–ª–µ–Ω–∞")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã photos: {e}")
            return False
    
    def drop_marks_table(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã marks"""
        try:
            query = "DROP TABLE IF EXISTS marks CASCADE;"
            success = self._execute_query(query)
            if success:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ marks —É–¥–∞–ª–µ–Ω–∞")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã marks: {e}")
            return False
    
    def drop_users_table(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users"""
        try:
            query = "DROP TABLE IF EXISTS users CASCADE;"
            success = self._execute_query(query)
            if success:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —É–¥–∞–ª–µ–Ω–∞")
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã users: {e}")
            return False
    
    def drop_all_tables(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        print("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        
        # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω: —Å–Ω–∞—á–∞–ª–∞ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –ø–æ—Ç–æ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ
        success_photos = self.drop_photos_table()
        success_marks = self.drop_marks_table() 
        success_users = self.drop_users_table()
        
        all_success = success_photos and success_marks and success_users
        
        if all_success:
            print("üéâ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
        
        return all_success
    
    def check_tables_exist(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º"""
        conn = self.connection_pool.getconn()
        try:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name IN ('users', 'marks', 'photos');
                """)
                existing_tables = [row[0] for row in cursor.fetchall()]
                return existing_tables
        finally:
            self.connection_pool.putconn(conn)
    
    def close_pool(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ connection pool"""
        if self.connection_pool:
            self.connection_pool.closeall()
            print("‚úÖ Connection pool –∑–∞–∫—Ä—ã—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    dropper = TableDropper()
    
    if not dropper.init_pool():
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_tables = dropper.check_tables_exist()
        if existing_tables:
            print(f"üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(existing_tables)}")
        else:
            print("üìã –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        confirmation = input("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã? (y/N): ")
        if confirmation.lower() != 'y':
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        
        # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        dropper.drop_all_tables()
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        dropper.close_pool()


if __name__ == "__main__":
    main()